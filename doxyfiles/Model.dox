/*!
    \file Model.h
    \brief Определяет классы Fragment, Walker и Model

    \enum Styles Стили начертания текста

    \typedef style_t
        \ingroup alias
        \brief Псевдоним, обозначающий пару <Элемент Styles, глубина тэга>
    
    \typedef matrix_t
        \ingroup alias
        \brief Псевдоним для хранения всех страниц книги
    
    \class Model Model.h

    \var list<Fragment*> Model::fragments
    \brief Двусвязный список, хранящий указатели на фрагменты текста.
    \details std::list вместо std::vector для повышения скорости получения & удаления первого элемента. Заполняется методом Model::split_into_words() еще до верстки.
    \see \ref lifecycle

    \var matrix_t Model::pages
    \brief Хранит сверстанные страницы, состоящие из Fragment*

    \var string Model::doc_links_name
    \brief Хранит префикс ссылок, определенный для документа его создателем.
    \see \ref lifecycle

    \var Walker Model::w{&fragments};
    \brief Экземпляр Walker, используемый для парсинга текста
    
    \var pugi::xml_document Model::doc
    \brief Представление текущего FB2-документа в виде дерева тегов. Подробнее смотри в документации к pugixml

    \var map<string, string> Model::binaries
    Двоичные вложения в кодировке base64


    \fn void Model::load_fb2(char* FILE_NAME)
    \brief Загружает fb2-файл, определяет кодировку, перезагружает файл в Юникод и запускает разбор xml

    \fn void Model::split_into_words()
    \brief Разделяет многословные Fragment-ы на отдельные слова.
    \see \ref lifecycle

    \subsection spec_codes
    \details При парсинге текста могут создаваться служебные фрагменты, не отображаемые на экране и несущие специальную информацию для движка верстки. Их тип и назначение определяются их полем Fragment::text, которое в таком случае может принимать следующие значения:
    <ul>
        <li>"&&&" -- обозначает перевод каретки на 2 строки вниз</li>
        <li>"\n" -- обозначает перевод каретки на следующую строку</li>
        <li>"SW_ALIGN_RIGHT_LINEWISE_START" -- начало блока текста, выравненного по правому краю построчно</li>
        <li> \deprecated "SW_POEM_START" -- начало блока текста, выравненного по центру. \todo Заменить на SW_ALIGN_CENTER_...WISE_START</li>
    </ul>

    \struct Walker Model.h
    \brief Класс для парсинга XML средствами pugixml и первичной генерации объектов Fragment.

    \var map<string, attr_t> Walker::cur_attrs
    \brief Хранит атрибуты текущего тега и всех его родителей.
    \note В целях экономии оперативной памяти (а std::map весьма прожорлив) сохраняется только атрибут *:href . При необходимости
    будет добавлено сохранение и других атрибутов.

    \var list<Fragment*>* Walker::frags
    \brief Указатель на Model::fragments

    \var vector<style_t> Walker::cur_style;
    \brief Хранит стили текущего тега и всех его родителей.

    \var bool Walker::is_in_body
    \brief Флаг, позволяющий не интерпретировать метаданные документа как текст собственно книги.

    \var string Walker::doc_links_name
    \brief Префикс имени ссылок, определенный создателем .fb2-документа

    \fn virtual bool Walker::for_each(pugi::xml_node& node)
    \brief Функция, которая применяется рекурсивно ко всем тегам документа
    \details Для каждого тега, содержащего текст или задающего пустую линию, создает Fragment, назначает ему стили и атрибуты; после этого добавляет указатель на вновь созданный Fragment в Model::fragments
    \see \ref lifecycle
*/