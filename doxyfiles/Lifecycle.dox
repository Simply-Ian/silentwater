/*!
    \page lifecycle Жизненный цикл приложения
    \section lifecycle_main Что происходит при запуске приложения?

    1. Стартует расположенная в Controller.cpp функция main() :
    \code {.cpp}
    int main(int argc, char** argv){
        Controller cont;
        char FILE_NAME[] = "RedRing.fb2";
        cont.load_book(argc == 1? FILE_NAME : argv[1]);
        cont.loop();
        return 0;
    }
    \endcode
    Она создает экземпляр класса Controller. Конструктор Controller::Controller() создает и настраивает метку номера страницы,
    навешивает callback-и экранным кнопкам "вправо" и "влево", загружает шрифт для рендеринга страницы.
    После этого main() запускает его метод load_book():
    \code {.cpp}
    void Controller::load_book(char* path){
        model.load_fb2(path);
        model.split_into_words();
        build_up_pages_from_frags();

        view.doc_links_name = model.doc_links_name;
        view.build_up_toc(this->table_of_contents);
        view.tocList->onItemSelect(&Controller::toc_navigate, this);
        set_page_num(0);
    }
    \endcode
    Controller::load_book() запускает метод Model::load_fb2(). 
        -# Он открывает файл по переданному пути в кодировке
        по умолчанию, разбирает корневой тег <?xml> и получает информацию о кодировке текста.
        \todo Для определения кодировки текста файл должен открываться "вручную", чтобы избежать полного парсинга. Нужно только
        считать значение одного атрибута тега, расположенного в первой строке. Это можно реализовать без средств pugixml.
        <br>
        Затем внутри model::load_fb2() вызывается функция ::load_text(). Она снова открывает файл и конвертирует его в UTF-8 с помощью
        libiconv. Далее происходит XML-парсинг, строится дерево тегов, определяется префикс ссылок. И, наконец, запускается Walker.
            1. Walker рекурсивно обходит все дерево тегов, игнорируя теги вне секции <body> . На каждом шаге он обновляет
            Walker::cur_style и Walker::cur_attrs . Если текущий тег задает стиль для вложенного в него текста или имеет атрибуты, значения стилей сохраняются в Walker::cur_style с указанием глубины, на которой находится тег; названия и значения атрибутов сохраняются в Walker::cur_attrs. На каждом шаге из Walker::cur_style удаляются стили и атрибуты, установленные более глубокими тегами.
            \note В целях экономии оперативной памяти (а std::map весьма прожорлив) сохраняется только атрибут *:href для ссылок и иллюстраций. При необходимости будет добавлено сохранение и других атрибутов.
            2. Когда Walker доходит до листа дерева -- текстового содержимого, он создает экземпляр Fragment с накопленными 
            стилями и атрибутами и добавляет по указателю в вектор Model::fragments. Если Walker встречает пустую линию, он добавляет Fragment без стилей, содержащий специальную метку "\n". В начале каждого абзаца в Model::fragments добавляется Fragment со специальной меткой "&&&".
        -# Дальше срабатывает метод Model::split_into_words(). Объекты Fragment, имеющие тип ct::ContentType::TEXT и содержащие более одного слова, для удобства верстки разбиваются на Fragment-ы, содержащие 1 слово. Каждый из полученных объектов Fragment сохраняет атрибуты и стили исходного Fragment. Функция использует хак для экономии оперативной памяти: необработанные Fragment-ы читаются из начала model.fragments, после чего удаляются, а получившиеся слова дозаписываются в конец. Это позволяет не создавать отдельный вектор (список) для хранения результата. Этот же хак обуславливает использование std::list<Fragment> вместо std::vector : при использовании вектора загрузка "Доктора Живаго" занимает несколько минут, а двусвязный список справляется меньше, чем за секунду.
        \see Fragment

        -# Выполняется метод Controller::build_up_pages_from_frags(). Он верстает страницы, используя информацию о размере 
        Controller::view::pageSprite. Для того, чтобы рассчитать, сколько места на странице будет заниматься каждый объект, 
        на основе каждого Fragment-а (кроме пустых линий и пробелов перед абзацами) создается временный экземпляр SWText или sf::Sprite. Также, в зависимости от стиля каждого фрагмента, ему может быть назначена группа выравнивания. Когда все фрагменты текста обработаны, добавляется страница с обложкой и сдвигается текст, которому назначены группы выранвнивания. Сверстанные страницы помещаются в Controller::pages.
        \see AlignmentGroup

        -# Происходит донастройка Controller::view (во view передается префикс ссылок внутри FB2-документа)
        -# Строится графическое оглавление (View::build_up_toc()). Виджету списка на левой панели назначается коллбэк.
        -# И наконец вызывается Controller::set_num(). Этот метод очищает текущую страницу Controller::cur_page
         и создает готовые к отрисовке объекты из Fragment-ов.

    2. Запускается Controller::loop(). Этот метод берет на себя управление программой. В ней находится главный GUI-цикл.
    \code {.cpp}
    void Controller::loop(){
        sf::Event event;
        sf::Time sleep_dur = sf::milliseconds(20);
        bool updateFlag;
        bool eventHandledByTGUI = false;
        draw_page();
        view.update();
        while (view.win.isOpen()){
            updateFlag = false;
            while (view.win.pollEvent(event)){
                eventHandledByTGUI = view.gui.handleEvent(event);
                // ...
                // =================Обработка пользовательких событий================
                // ...
                updateFlag = true; // Произошло некоторое событие, нужна перерисовка
            }
            if (updateFlag){
                draw_page();
                view.update();
            }
            sf::sleep(sleep_dur);
        }
    }
    \endcode
    50 раз в секунду он собирает пользовательские события, обрабатывает их и, если необходимо, перерисовывает страницу, после чего
    засыпает на 20 мс.
*/